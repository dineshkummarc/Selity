#!/usr/bin/perl

# Selity - When virtual hosting becomes scalable
# Copyright 2012 by Selity
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		Selity
# @copyright	2012 by Selity | http://selity.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @link			http://selity.net Selity Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../PerlLib";

use Selity::Debug;
use Selity::Boot;
use Selity::Execute;
use Selity::Mail;
use Selity::Servers;
use Data::Dumper;

newDebug('selity-vrl-traff.log');

sub traff_start_up {

	umask(027);
	Selity::Boot->new()->init({nolock => 'yes'});
	@{$main::Servers} = Selity::Servers->new()->get();

	0;
}

sub traff_count{

	my $rs			= 0;
	my $timestamp	= time;
	my %traff;

	# timestamp has floor down for the last half'n our to make timestamps in
	# server_traffic and domain_traffic the same
	$timestamp = $timestamp - ($timestamp % 1800);

	my $sql = "
		SELECT `domain_id`, `domain_name`, 'domain' AS `type` FROM `domain`
		UNION
		SELECT `domain_id`, `alias_name`, 'domain_aliasses' AS `type` FROM `domain_aliasses`
		UNION
		SELECT `domain_id`, CONCAT(`subdomain_name`, '.', `domain_name`), 'subdomain' AS `type` FROM `subdomain` LEFT JOIN `domain` USING (`domain_id`)
		UNION
		SELECT `domain_id`, CONCAT(`subdomain_alias_name`, '.', `alias_name`), 'subdomain_alias' AS `type` FROM `subdomain_alias` LEFT JOIN `domain_aliasses` USING (`alias_id`)
	";
	my $rdata = Selity::Database->new()->factory()->doQuery('domain_name', $sql);

	if (ref $rdata ne 'HASH'){
		error("$rdata");
		Selity::Mail->new()->errmsg($rdata);
		$rs = 1;
	} else {

		foreach (keys %$rdata) {

			my $domain_name	= $rdata->{$_}->{domain_name};
			my $domain_id	= $rdata->{$_}->{domain_id};
			my $type	= $rdata->{$_}->{type};
			my $traffic		= 0;

			foreach(@{$main::Servers}){
				s/\.pm//;
				my $file	= "Servers/$_.pm";
				my $class	= "Servers::$_";
				require $file;
				my $instance	= $class->factory();
				debug("Calling server $_ function getTraffic for $domain_name") if $instance->can('getTraffic');
				debug("server $_ do not support function getTraffic") unless $instance->can('getTraffic');
				$traff{$domain_id}->{$_} += $instance->getTraffic($domain_name) if $instance->can('getTraffic');
				debug("traffic for $type $domain_name for $_ is $traff{$domain_id}->{$_}") if exists $traff{$domain_id}->{$_};
			}
		}
	}

	foreach(keys %traff){
		next unless $traff{$_}->{httpd} || $traff{$_}->{ftpd} || $traff{$_}->{mta} || $traff{$_}->{po};

		$sql = "SELECT `domain_id` FROM `domain_traffic` WHERE `domain_id` = ? AND `dtraff_time` >= UNIX_TIMESTAMP(CURRENT_DATE())";
		my $result = Selity::Database->new()->factory()->doQuery('domain_id', $sql, $_);

		if (ref $result ne 'HASH'){
			error("$result");
			Selity::Mail->new()->errmsg($result);
			$rs = 1;
		} else {
			unless (scalar keys %{$result}) {
				$sql = "
					INSERT INTO
						`domain_traffic`
					(
						`domain_id`, `dtraff_time`, `dtraff_web`,
						`dtraff_ftp`, `dtraff_mail`, `dtraff_pop`
					) VALUES (
						?, ?, ?, ?, ?, ?
					)
				";
				$result = Selity::Database->new()->factory()->doQuery(
					'update',
					$sql,
					$_,
					$timestamp,
					exists $traff{$_}->{httpd} ? $traff{$_}->{httpd} : 0,
					exists $traff{$_}->{ftpd} ? $traff{$_}->{ftpd} : 0,
					exists $traff{$_}->{mta} ? $traff{$_}->{mta} : 0,
					exists $traff{$_}->{po} ? $traff{$_}->{po} : 0
				);
				if (ref $result ne 'HASH'){
					error("$result");
					Selity::Mail->new()->errmsg($result);
					$rs = 1;
				}
			} else {
				$sql = "
					UPDATE
						`domain_traffic`
					SET
						`dtraff_web` = `dtraff_web` + ?,
						`dtraff_ftp` = `dtraff_ftp` + ?,
						`dtraff_mail` = `dtraff_mail` + ?,
						`dtraff_pop` = `dtraff_pop` + ?,
						`dtraff_time` = ?
					WHERE
						`domain_id` = ?
						AND
						`dtraff_time` >= UNIX_TIMESTAMP(CURRENT_DATE())
					LIMIT 1
				";
				$result = Selity::Database->new()->factory()->doQuery(
					'update',
					$sql,
					exists $traff{$_}->{httpd} ? $traff{$_}->{httpd} : 0,
					exists $traff{$_}->{ftpd} ? $traff{$_}->{ftpd} : 0,
					exists $traff{$_}->{mta} ? $traff{$_}->{mta} : 0,
					exists $traff{$_}->{po} ? $traff{$_}->{po} : 0,
					$timestamp,
					$_
				);
				if (ref $result ne 'HASH'){
					error("$result");
					Selity::Mail->new()->errmsg($result);
					$rs = 1;
				}
			}
		}
	}

	$rs;
}

my $rs = 0;

exit 1 if traff_start_up();

$rs |= traff_count();

exit $rs;

#!/usr/bin/perl
#
# i-MSCP a internet Multi Server Control Panel
#
# The contents of this file are subject to the Mozilla Public License
# Version 1.1 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
# http://www.mozilla.org/MPL/
#
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
# License for the specific language governing rights and limitations
# under the License.
#
# The Original Code is i-MSCP - Multi Server Control Panel.
#
#  The Initial Developer of the Original Code is i-MSCP Team.
#  Portions created by Initial Developer are Copyright (C) 2010
#  i-MSCP - internet Multi Server Control Panel. All Rights Reserved.
#
# Copyright: (C) 2010-2012 by i-MSCP | http://i-mscp.net
# Author: Sacha Bay <sascha.bay@i-mscp.net>
# Version SVN: $Id$
# Project Site: http://i-mscp.net
# License http://www.mozilla.org/MPL/ MPL 1.1
#

use FindBin;
use lib "$FindBin::Bin/";
require 'imscp_common_code.pl';

use strict;
use XML::Parser;
use warnings;

#Decoding data which pushed from another script
my $decoded_pushstring = decode_base64($ARGV[0]);
my ($sw_domain_id,$sw_software_id,$sw_path,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd,$sw_install_username,$sw_install_password,$sw_install_email,$sw_software_status,$sw_software_depot,$sw_software_master_id,$sw_aliasdomain_id,$sw_subdomain_id,$sw_aliassubdomain_id)=split(/,/, $decoded_pushstring);

sub sw_mngr_start_up {
	my ($rs, $rdata) = (undef, undef);
	push_el(\@main::el, 'sw_mngr_start_up()', 'Starting software manager...');
	# checking for master process;
	#$rs = check_master();
	#return $rs if ($rs != 0);

	# Let's clear Execution Logs, if any.
	if (-e $main::imscp_sw_mngr_el) {
		$rs = del_file($main::imscp_sw_mngr_el);
		return $rs if ($rs != 0);
	}
	# config check;
	$rs = get_conf();
	return $rs if ($rs != 0);
	# sql check;

	#
	# getting initial data also must be done here;
	#

	my $sql = "
		SELECT
			`domain_id`,
			`domain_name`,
			`domain_gid`,
			`domain_uid`,
			`domain_admin_id`,
			`domain_created_id`,
			`domain_created`,
			`domain_last_modified`,
			`domain_mailacc_limit`,
			`domain_ftpacc_limit`,
			`domain_traffic_limit`,
			`domain_sqld_limit`,
			`domain_sqlu_limit`,
			`domain_status`,
			`domain_alias_limit`,
			`domain_subd_limit`,
			`domain_ip_id`,
			`domain_disk_limit`,
			`domain_disk_usage`,
			`domain_php`,
			`domain_cgi`
		FROM
			`domain`
	    LIMIT 0,1
	";
	($rs, $rdata) = doSQL($sql);
	return $rs if ($rs != 0);

	#
	# getting task id and domain record id;
	#

	return 0;
}

sub sw_mngr_shut_down {
	my $rs = undef;
	push_el(\@main::el, 'sw_mngr_shut_down()', 'Ending software manager...');
	return 0;
}

#
# Software add/delete;
#

sub sw_add_data {
	push_el(\@main::el, 'sw_add_data()', 'Starting adding software...');
	my ($sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database, $sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email, $domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path, $sw_path) = @_;
	my $rs = undef;
	unless(-d $sw_dest_path."/") {
		$rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_dest_path/");
		$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} $uid:$gid $sw_dest_path/");
	}
	if (-e $sw_dest_path."/index.html" || -d $sw_dest_path."/images/") {
		if (-e $sw_dest_path."/index.html"){
			$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/index.html $sw_dest_path/index.installer_bak");
		}
		if (-d $sw_dest_path."/images/"){
			$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/images $sw_dest_path/images.installer_bak");
		}
	}
	$rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_tmp_path/");
	chdir ("$sw_tmp_path");
	if($sw_software_depot eq 'yes'){
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} $sw_src_path-$sw_software_master_id.tar.gz $sw_tmp_path/");
		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_master_id.tar.gz");
	}else{
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} $sw_src_path-$sw_software_id.tar.gz $sw_tmp_path/");
		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_id.tar.gz");
	}
	$rs = sys_command_rs("$main::cfg{'CMD_CP'} -rfp $sw_tmp_path/web/. $sw_dest_path/");
	my $check_xargs = sys_command_rs("echo 'test' | xargs -r >/dev/null 2>&1;");
	my $XARGSVAR;
	if($check_xargs == 0) {
		$XARGSVAR = "xargs -r";
	} else {
		$XARGSVAR = "xargs";
	}
	$rs = sys_command_rs("find $sw_dest_path/ -type d -print0 | $XARGSVAR -0 $main::cfg{'CMD_CHMOD'} 0755");
	$rs = sys_command_rs("find $sw_dest_path/ -type f -print0 | $XARGSVAR -0 $main::cfg{'CMD_CHMOD'} 0644");
	$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} -R $uid:$gid $sw_dest_path/*");

	#Encoding data to push to another script
	my $imscp_software_install_pushstring = encode_base64("install,$sw_software_db,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd,$sw_install_username,$sw_install_password,$sw_install_email,$domain_name,$sw_dest_path,$sw_path");

	$rs = sys_command_rs("perl $sw_tmp_path/$sw_software_installfile \"$imscp_software_install_pushstring\"");
	$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} -R $uid:$gid $sw_dest_path/");
	$rs = sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_tmp_path");
	return $rs if ($rs != 0);
	push_el(\@main::el, 'sw_add_data()', 'Ending adding software...');
	return 0;
}

sub sw_del_data {
	push_el(\@main::el, 'sw_del_data()', 'Starting deleting software...');
	my ($sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database, $sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email, $domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path) = @_;
	my $sw_uninstall_xml_file = "$sw_tmp_path/xml/uninstall.xml";
	my $rs = undef;
	our ($tag, $data) = "";
	our %UNINSTALL_DATA = (software_deldirs		=>	'',
							software_delfiles	=>	''
							);
	#Unpack Package at first!
	$rs = sys_command_rs("$main::cfg{'CMD_MKDIR'} -p $sw_tmp_path/");
	chdir ("$sw_tmp_path");
	if($sw_software_depot eq 'yes'){
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} $sw_src_path-$sw_software_master_id.tar.gz $sw_tmp_path/");
		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_master_id.tar.gz");
	}else{
		$rs = sys_command_rs("$main::cfg{'CMD_CP'} $sw_src_path-$sw_software_id.tar.gz $sw_tmp_path/");
		$rs = sys_command_rs("$main::cfg{'CMD_TAR'} -xzf $sw_tmp_path/$sw_software_archive-$sw_software_id.tar.gz");
	}


	my $parser = new XML::Parser ();
	$parser->setHandlers (
						Start   => \&startElement,
						End     => \&endElement,
						Char    => \&characterData
						);
	$parser->parsefile ($sw_uninstall_xml_file);

	sub startElement {
		my ($parseinst, $element, %attrs) = @_;
		SWITCH: {
			if ($element eq "software_deldirs") {
				$tag = "software_deldirs";
				last SWITCH;
			}
			if ($element eq "software_delfiles") {
				$tag = "software_delfiles";
				last SWITCH;
			}
		}
	}
	sub endElement {
		my( $parseinst, $element ) = @_;
	}
	sub characterData {
		my( $parseinst, $data ) = @_;
		if (($tag eq "software_deldirs") || ($tag eq "software_delfiles")) {
			$data =~ s/\n|\t//g;
			if ($data ne "") {
				$UNINSTALL_DATA{$tag} .= $data;
			}
		}
	}
	if ($UNINSTALL_DATA{software_deldirs} ne "" && $UNINSTALL_DATA{software_delfiles} ne "") {
		my @uninstalldirs=split(",",$UNINSTALL_DATA{software_deldirs});
		my @uninstallfiles=split(",",$UNINSTALL_DATA{software_delfiles});

		foreach (@uninstalldirs){
			$rs .= sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_dest_path/$_");
		}
		foreach (@uninstallfiles){
			$rs .= sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_dest_path/$_");
		}
		return $rs if ($rs != 0);

		#Encoding data to push to another script
		my $imscp_software_uninstall_pushstring = encode_base64("uninstall,$sw_software_db,$sw_software_prefix,$sw_database,$sw_database_user,$sw_database_tmp_pwd,$sw_install_username,$sw_install_password,$sw_install_email,$domain_name,$sw_dest_path,$sw_path");

		$rs = sys_command_rs("perl $sw_tmp_path/$sw_software_installfile \"$imscp_software_uninstall_pushstring\"");
		$rs = sys_command_rs("$main::cfg{'CMD_RM'} -rf $sw_tmp_path");
		return $rs if ($rs != 0);

		if (-e $sw_dest_path."/index.installer_bak" || -d $sw_dest_path."/images.installer_bak/") {
			if (-e $sw_dest_path."/index.installer_bak"){
				$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/index.installer_bak $sw_dest_path/index.html");
			}
			if (-d $sw_dest_path."/images.installer_bak/"){
				$rs = sys_command_rs("$main::cfg{'CMD_MV'} $sw_dest_path/images.installer_bak $sw_dest_path/images");
			}
			$rs = sys_command_rs("$main::cfg{'CMD_CHOWN'} -R $uid:$gid $sw_dest_path/*");
		}
	}
	push_el(\@main::el, 'sw_del_data()', 'Ending deleting software...');
	return 0;
}

sub sw_mngr_engine {
	my ($rs, $rows, $rdata, $rowsdomainname) = (undef, undef, undef, undef);
	push_el(\@main::el, 'sw_mngr_engine()', 'Starting software manager engine...');
	my $sql;
	$sql = "
		SELECT
			`reseller_id`,
			`software_db`,
			`software_archive`,
			`software_installfile`,
			`software_depot`,
			`software_master_id`
		FROM
			`web_software`
		WHERE
			`software_id` = $sw_software_id
	";

	($rs, $rows) = doSQL($sql);
	return $rs if ($rs != 0);
	$rows = @$rows[0];
	my ($sw_reseller_id, $sw_software_db, $sw_software_archive, $sw_software_installfile, $sw_software_depot, $sw_software_master_id) = (@$rows[0], @$rows[1], @$rows[2], @$rows[3], @$rows[4], @$rows[5]);
	my $query;
	$query = "
		SELECT
			`domain_name`,
			`domain_gid`,
			`domain_uid`
		FROM
			`domain`
		WHERE
			`domain_id` = $sw_domain_id
	";

	($rs, $rows) = doSQL($query);
	return $rs if ($rs != 0);
	$rows = @$rows[0];
	my ($dmn_name, $gid, $uid) = (@$rows[0], @$rows[1], @$rows[2]);
	my $querydomainname;
	my $domain_name = "";
	if(($sw_aliasdomain_id + $sw_subdomain_id + $sw_aliassubdomain_id) > 0) {
		if($sw_aliasdomain_id > 0){
			$querydomainname = "
				SELECT
					`alias_name`
				FROM
					`domain_aliasses`
				WHERE
					`alias_id` = $sw_aliasdomain_id
			";
		}elsif($sw_subdomain_id > 0){
			$querydomainname = "
				SELECT
					`subdomain`.`subdomain_name`,
					`domain`.`domain_name`
				FROM
					`subdomain`
				JOIN
					`domain`
				ON
					`subdomain`.`domain_id` = `domain`.`domain_id`
				WHERE
					`subdomain`.`subdomain_id` = $sw_subdomain_id
			";
		}elsif($sw_aliassubdomain_id > 0){
			$querydomainname = "
				SELECT
					`subdomain_alias`.`subdomain_alias_name`,
					`domain_aliasses`.`alias_name`
				FROM
					`subdomain_alias`
				JOIN
					`domain_aliasses`
				ON
					`subdomain_alias`.`alias_id` = `domain_aliasses`.`alias_id`
				WHERE
					`subdomain_alias`.`subdomain_alias_id` = $sw_aliassubdomain_id
			";
		}
		($rs, $rowsdomainname) = doSQL($querydomainname);
		return $rs if ($rs != 0);
		$rowsdomainname = @$rowsdomainname[0];
		my ($domain_name_sub, $domain_name_master) = (@$rowsdomainname[0], @$rowsdomainname[1]);
		$domain_name = $domain_name_sub.".".$domain_name_master;
	}else{
		$domain_name = $dmn_name;
	}

	my $sw_src_path = "";
	my $gui_software_dir = $main::cfg{'GUI_SOFTWARE_DIR'};
	my $gui_software_depot_dir = $main::cfg{'GUI_SOFTWARE_DEPOT_DIR'};
	my $apache_www_dir = $main::cfg{'USER_HOME_DIR'};
	my $software_tmp_dir = $main::cfg{'SOFTWARE_TMP_DIR'};
	if ($sw_software_depot eq 'yes') {
		$sw_src_path = "$gui_software_depot_dir/$sw_software_archive";
	}else{
		$sw_src_path = "$gui_software_dir/$sw_reseller_id/$sw_software_archive";
	}
	my $sw_tmp_path = "$software_tmp_dir/sw-$sw_domain_id-$sw_software_id";
	my $sw_dest_path = "$apache_www_dir/$dmn_name$sw_path";
	if ($sw_software_status eq 'toadd') {
		my @entry = ($sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database, $sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email, $domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path, $sw_path);
		$rs = sw_add_data(@entry);
		if ($rs == 0) {
            $sql = "
            	UPDATE
            		`web_software_inst`
            	SET
            		`software_status` = 'ok'
            	WHERE
            		`software_id` = $sw_software_id
            	AND
            		`domain_id` = $sw_domain_id
            ";
			($rs, $rdata) = doSQL($sql);
			return $rs if ($rs != 0);
		}
	}elsif ($sw_software_status eq 'delete') {
		my @entry = ($sw_software_archive, $sw_software_installfile, $sw_software_db, $sw_software_prefix, $sw_database, $sw_database_user, $sw_database_tmp_pwd, $sw_install_username, $sw_install_password, $sw_install_email, $domain_name, $gid, $uid, $sw_src_path, $sw_tmp_path, $sw_dest_path, $sw_path);
		$rs = sw_del_data(@entry);
		if ($rs == 0) {
            $sql = "
            	DELETE FROM
            		`web_software_inst`
            	where
            		`software_id` = $sw_software_id
            	AND
            		`domain_id` = $sw_domain_id
            ";
			($rs, $rdata) = doSQL($sql);
			return $rs if ($rs != 0);
		}
	}
	push_el(\@main::el, 'sw_mngr_engine()', 'Ending software manager engine...');
}

my $rs;

$rs = sw_mngr_start_up();

if ($rs != 0) {

    dump_el(\@main::el, $main::imscp_sw_mngr_el);

    sw_mngr_shut_down();

    exit 1;

}

$rs = sw_mngr_engine();

if ($rs != 0) {

    dump_el(\@main::el, $main::imscp_sw_mngr_el);

    sw_mngr_shut_down();

    exit 1;

}

$rs = sw_mngr_shut_down();

if ($rs != 0) {

    dump_el(\@main::el, $main::imscp_sw_mngr_el);

    exit 1;

}

exit 0;

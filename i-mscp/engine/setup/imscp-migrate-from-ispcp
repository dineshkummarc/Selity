#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010 - 2011 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010 - 2012 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @version		SVN: $Id: imscp-migrate-from-ispcp 5363 2011-10-01 10:06:32Z sci2tech $
# @link			http://i-mscp.net i-MSCP Home Site
# @license      http://www.gnu.org/licenses/gpl-2.0.html GPL v2
#

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..";
use lib "$FindBin::Bin/../PerlLib";
use lib "$FindBin::Bin/../PerlVendor";

use version;

use iMSCP::Debug;
use iMSCP::Requirements;
use Data::Dumper;

umask(027);

newDebug('imscp-migrate-from-ispcp.log');

iMSCP::Boot->new(mode => 'all')->init({nodatabase => 'yes'});

loadConfigs();

exit 1 if setup_engine();
exit 0;


sub setup_engine {

	use iMSCP::Stepper;

	my @steps = (
		[\&welcome, 'Just say Hello World: '],
		[\&checkISPCPVersion, 'Test if is a supported version: '],
		[\&checkDbPass, 'Do we have a database password?: '],
		[\&databaseIntegrityTest, 'Is database usable?: '],
		[\&userTest, 'System users are in place?: '],
		[\&systemConfigTest, 'Save system config files if exists: '],
		[\&confSave, 'Save system configuration: '],
		[\&dbUpgrade, 'Save system configuration: '],
		[\&otherMessCleanup, 'Some system cleaning: '],
		[\&daemonRemove, 'Remove imscp daemon: '],
		[\&removeDirs, 'Delete ispcp directories: '],
		[\&removeFile, 'Delete ispcp files: ']
	);
	my $step = 1;
	for (@steps){
		exit 1 if step($_->[0], $_->[1], scalar @steps, $step);
		$step++;
	}
	iMSCP::Dialog->factory()->endGauge()  if iMSCP::Dialog->factory()->needGauge();

	systemSetup();

	0;
}

sub loadConfigs{

	use iMSCP::Config;

	my $path = ($^O =~ /bsd$/ ? '/usr/local/etc/' : '/etc/');

	fatal('ispcp.conf files not found') if(! -f $path.'ispcp/ispcp.conf' || ! -f $path.'imscp/imscp.conf');

	tie %main::ispcpConfig, 'iMSCP::Config','fileName' => $path.'ispcp/ispcp.conf';

	0;
}

sub welcome{

	use iMSCP::Dialog;

	my $dialog = iMSCP::Dialog->factory();
	$dialog->set('title', 'Upgrade to iMSCP');
	$dialog->set('backtitle', "iMSCP internet Multi Server Control Panel");

	$dialog->set('yes-label','CONTINUE');
	$dialog->set('no-label','EXIT');
	exit 0 if ($dialog->yesno(
					"\n
						Welcome to \\Z1iMSCP internet Multi Server Control Panel v$main::imscpConfig{'Version'}\\Z0 Upgrade Dialog.
						This program will upgrade your ispCP system to iMSCP.

						\\ZuPlease make sure you have a backup of your server data\\Zn.

						NOTE: During the migration process some or all services might require to be shut down or restarted.\n\n
						You can stop this process by pushing \\Z1EXIT\\Z0 button
						To process select \\Z1CONTINUE\\Z0 button"

		)
	);

	0;
}

sub checkISPCPVersion{

	use iMSCP::Dialog;

	$main::ispcpConfig{'Version'} =~ m!([\d.]+)!;
	if(version->new($1) < version->new('1.0.7')){
		error('Only migration from ispCP 1.0.7 or later is supported');
		iMSCP::Dialog->factory()->set('defaultno', '');
		exit 1 if iMSCP::Dialog->factory()->yesno("


						\\Z1\\ZuispCP $1 is not supported!\\Zn

						We only support migration from ispCP 1.0.7 and later!

						By selecting CONTINUE button you can ignore this!

						\\Z1WARNING: \\ZuDATA might be corrupt if you proceed forward\\Zn!!
		");
	}

	0;
}

sub checkDbPass{

	use iMSCP::File;
	use iMSCP::Dialog;

	my @paths = (
		$main::ispcpConfig{'CONF_DIR'}.'/ispcp-keys.conf',
		$main::ispcpConfig{'ROOT_DIR'}.'/engine/ispcp-db-keys.pl',
		$main::ispcpConfig{'ROOT_DIR'}.'/engine/messenger/ispcp-db-keys.pl',
		$main::ispcpConfig{'GUI_ROOT_DIR'}.'/include/ispcp-db-keys.php'
	);

	my ($dbkey, $dbiv, $pass);
	for my $keyfile (@paths){

		debug("\n\n\nTesting $keyfile");
		next if(! -f $keyfile);

		my $file = iMSCP::File->new(filename => "$keyfile")->get();
		if($file =~ m!db_pass_key\s=\s'(.+)'! || $file =~ m!DB_PASS_KEY=(.+)!i){
			$main::ispcpDBKey = $1;
			debug($main::ispcpDBKey);
			if( $file =~ m!db_pass_iv\s=\s'(.+)'! || $file =~ m!DB_PASS_IV=(.+)!){
				$main::ispcpDBiv = $1;
				debug($main::ispcpDBiv);
				my $error = connectispCPDb();
				if(!$error) {
					return 0;
				}
				error("$error");
			}
		}
	}

	iMSCP::Dialog->factory()->msgbox("


							\\Z1\\ZuispCP database keys are corrupt!\\Zn

							We tryied to use folowing keys

							".join("\n							", @paths)."

							but all seems corrupt!

							Fix this and restart.
	");
	error("ispCP database keys are corrupt! We tryied to use folowing keys\n".join("\n", @paths));
	1;
}

sub connectispCPDb{

	use iMSCP::Crypt;

	my $crypt = iMSCP::Crypt->new();
	$crypt->set('key', $main::ispcpDBKey);
	$crypt->set('iv', $main::ispcpDBiv);
	my $pass = $crypt->decrypt_db_password($main::ispcpConfig{'DATABASE_PASSWORD'});
	my $database = iMSCP::Database->new(db => 'mysql')->factory();
	$database->set('DATABASE_NAME', $main::ispcpConfig{'DATABASE_NAME'});
	$database->set('DATABASE_HOST', $main::ispcpConfig{'DATABASE_HOST'});
	$database->set('DATABASE_USER', $main::ispcpConfig{'DATABASE_USER'});
	$database->set('DATABASE_PASSWORD', $pass);

	return $database->connect();
}

sub databaseIntegrityTest{

	use iMSCP::Crypt;
	use iMSCP::Database;
	use iMSCP::Dialog;

	#dependicies broken
	my $query = "SELECT t1.* FROM `%s` as t1 LEFT JOIN `%s` as t2 ON t1.`%s` = t2.`%s` WHERE t2.`%s` is null %s";
	my @tests = (
		{group => 'admin_id', childTable => 'admin', parentTable=>'admin', childField => 'created_by', parentField => 'admin_id', limit => "AND t1.`admin_type` = 'user'"},
		{group => 'admin_id', childTable => 'admin', parentTable=>'admin', childField => 'created_by', parentField => 'admin_id', limit => "AND t1.`admin_type` = 'reseller'"},
		{group => 'admin_id', childTable => 'admin', parentTable=>'domain', childField => 'admin_id', parentField => 'domain_admin_id', limit => "AND t1.`admin_type` = 'user'"},
		{group => 'domain_id', childTable => 'domain', parentTable=>'admin', childField => 'domain_admin_id', parentField => 'admin_id', limit => ""},
		{group => 'domain_id', childTable => 'domain', parentTable=>'server_ips', childField => 'domain_ip_id', parentField => 'ip_id', limit => ""},
		{group => 'alias_id', childTable => 'domain_aliasses', parentTable=>'domain', childField => 'domain_id', parentField => 'domain_id', limit => ""},
		{group => 'domain_dns_id', childTable => 'domain_dns', parentTable=>'domain', childField => 'domain_id', parentField => 'domain_id', limit => ""},
		{group => 'domain_dns_id', childTable => 'domain_dns', parentTable=>'domain_aliasses', childField => 'alias_id', parentField => 'alias_id', limit => "AND t1.`alias_id` != 0"},
		{group => 'userid', childTable => 'ftp_users', parentTable=>'domain', childField => 'uid', parentField => 'domain_uid', limit => ""},
		{group => 'userid', childTable => 'ftp_users', parentTable=>'domain', childField => 'gid', parentField => 'domain_gid', limit => ""},
		{group => 'id', childTable => 'htaccess', parentTable=>'domain', childField => 'dmn_id', parentField => 'domain_id', limit => ""},
		{group => 'id', childTable => 'htaccess', parentTable=>'htaccess_users', childField => 'user_id', parentField => 'id', limit => "AND t1.`user_id` != 0"},
		{group => 'id', childTable => 'htaccess', parentTable=>'htaccess_groups', childField => 'group_id', parentField => 'id', limit => "AND t1.`group_id` != 0"},
		{group => 'id', childTable => 'htaccess_groups', parentTable=>'domain', childField => 'dmn_id', parentField => 'domain_id', limit => ""},
		#{group => 'id', childTable => 'htaccess_groups', parentTable=>'htaccess_users', childField => 'members', parentField => 'id', limit => ""},
		{group => 'id', childTable => 'htaccess_users', parentTable=>'domain', childField => 'dmn_id', parentField => 'domain_id', limit => ""},
		{group => 'mail_id', childTable => 'mail_users', parentTable=>'domain', childField => 'domain_id', parentField => 'domain_id', limit => ""},
		{group => 'mail_id', childTable => 'mail_users', parentTable=>'domain_aliasses', childField => 'sub_id', parentField => 'alias_id', limit => "AND t1.`mail_type` LIKE  'alias_%'"},
		{group => 'mail_id', childTable => 'mail_users', parentTable=>'subdomain', childField => 'sub_id', parentField => 'subdomain_id', limit => "AND t1.`mail_type` LIKE  'subdom_%'"},
		{group => 'mail_id', childTable => 'mail_users', parentTable=>'subdomain_alias', childField => 'sub_id', parentField => 'subdomain_alias_id', limit => "AND t1.`mail_type` LIKE  'alssub_%'"},
		{group => 'subdomain_id', childTable => 'subdomain', parentTable=>'domain', childField => 'domain_id', parentField => 'domain_id', limit => ""},
		{group => 'subdomain_alias_id', childTable => 'subdomain_alias', parentTable=>'domain_aliasses', childField => 'alias_id', parentField => 'alias_id', limit => ""},
		{group => 'groupname', childTable => 'ftp_group', parentTable=>'domain', childField => 'gid', parentField => 'domain_gid', limit => ""},
		#{group => '', childTable => '', parentTable=>'', childField => '', parentField => '', limit => ""},
		{group => 'name', childTable => 'quotalimits', parentTable=>'domain', childField => 'name', parentField => 'domain_name', limit => ""},
		{group => 'name', childTable => 'quotatallies', parentTable=>'domain', childField => 'name', parentField => 'domain_name', limit => ""},
		{group => 'sqld_id', childTable => 'sql_database', parentTable=>'domain', childField => 'domain_id', parentField => 'domain_id', limit => ""},
		{group => 'sqlu_id', childTable => 'sql_user', parentTable=>'sql_database', childField => 'sqld_id', parentField => 'sqld_id', limit => ""},
		#{group => '', childTable => '', parentTable=>'', childField => '', parentField => '', limit => ""},
	);
	my @errors = ();
	local $Data::Dumper::Terse = 1;
	for my $test (@tests){
		my $preparedQuery =  sprintf($query, $test->{childTable}, $test->{parentTable}, $test->{childField}, $test->{parentField}, $test->{parentField}, $test->{limit});
		my $database = iMSCP::Database->new(db => 'mysql')->factory();
		my $result = $database->doQuery($test->{group}, $preparedQuery);
		if (ref $result ne 'HASH'){
			error $preparedQuery;
		} else {
			if (keys %{$result}){
				for my $row (values %{$result}){
					push(@errors, "Table $test->{childTable} orphan entry: ". (Dumper $row));
				}

			}
		}
	}

	#check if all status is ok
	$query = "SELECT * FROM `%s` WHERE `%s` != 'ok'";
	@tests = (
		{group => 'domain_id',			table => 'domain',			statusField => 'domain_status'},
		{group => 'alias_id',			table => 'domain_aliasses',	statusField => 'alias_status'},
		{group => 'id',					table => 'htaccess',		statusField => 'status'},
		{group => 'id',					table => 'htaccess_groups',	statusField => 'status'},
		{group => 'id',					table => 'htaccess_users',	statusField => 'status'},
		{group => 'mail_id',			table => 'mail_users',		statusField => 'status'},
		{group => 'ip_id',				table => 'server_ips',		statusField => 'ip_status'},
		{group => 'subdomain_id',		table => 'subdomain',		statusField => 'subdomain_status'},
		{group => 'subdomain_alias_id',	table => 'subdomain_alias',	statusField => 'subdomain_alias_status'},
	);

	for my $test (@tests){
		my $preparedQuery =  sprintf($query, $test->{table}, $test->{statusField});
		my $database = iMSCP::Database->new(db => 'mysql')->factory();
		my $result = $database->doQuery($test->{group}, $preparedQuery);
		if (ref $result ne 'HASH'){
			error $preparedQuery;
		} else {
			if (keys %{$result}){
				for my $row (values %{$result}){
					push(@errors, "Table $test->{table} has records that have status different then ok: ". (Dumper $row));
				}

			}
		}
	}

	#test databases and sql users
	$query = 'SELECT * FROM `sql_user` as t1 LEFT JOIN `sql_database` AS t2 ON t1.`sqld_id` = t2.`sqld_id`';
	my $database = iMSCP::Database->new(db => 'mysql')->factory();
	my $result = $database->doQuery('sqlu_id', $query);
	if (ref $result ne 'HASH'){
		error $query;
	} else {
		if (keys %{$result}){
			for my $row (values %{$result}){
				$database->set('DATABASE_USER', $row->{sqlu_name});
				my $crypt = iMSCP::Crypt->new();
				$crypt->set('key', $main::ispcpDBKey);
				$crypt->set('iv', $main::ispcpDBiv);
				$database->set('DATABASE_PASSWORD', $crypt->decrypt_db_password($row->{sqlu_pass}));
				$database->set('DATABASE_NAME', '');
				my $rt = $database->connect();
				if($rt){
					chomp($rt);
					$rt = "User $row->{sqlu_name} access denied: $rt". Dumper $row;
					push(@errors, $rt) if($rt);
				} else {
					$database->set('DATABASE_NAME', $row->{sqld_name});
					my $rt = $database->connect();
					if($rt){
						chomp($rt);
						$rt = "User $row->{sqlu_name} can not connect to database $row->{sqld_name}: $rt". Dumper $row;
						push(@errors, $rt);
					}
				}
			}
		}
	}
	if (@errors){
		iMSCP::Dialog->factory()->msgbox("
							\\Z1\\ZuispCP database records are corrupt!\\Zn\n
							Please fix folowing:\n\n".
							join("\n\n", @errors)
							."\nFix this and try again.
		");
		error("".join("\n", @errors));
		return 1;
	}

	connectispCPDb(); # restore conection

	0;
}

sub userTest{

	use iMSCP::Database;
	use iMSCP::Dialog;

	my @errors;

	## CLIENT USER
	my $query = 'SELECT * FROM `domain`';
	my $database = iMSCP::Database->new(db => 'mysql')->factory();
	my $result = $database->doQuery('domain_gid', $query);
	if (ref $result ne 'HASH'){
		push(@errors, "$query produced following error: $result");
	} else {
		if (keys %{$result}){
			local $Data::Dumper::Terse = 1;
			for my $row (values %{$result}){
				push(@errors, "No system user has group id $row->{domain_gid}") if(!getgrgid($row->{domain_gid}));
				push(@errors, "No such group ".$main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'}.$row->{domain_gid})
					if(!getgrnam($main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'}.$row->{domain_gid}));
				push(@errors, "No system user has user id = $row->{domain_uid}") if(!getpwuid($row->{domain_uid}));
				push(@errors, "No such user ".$main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'}.$row->{domain_uid})
					if(!getpwnam($main::ispcpConfig{'APACHE_SUEXEC_USER_PREF'}.$row->{domain_uid}));
			}
		}
	}

	if (@errors){
		iMSCP::Dialog->factory()->msgbox("
							\\Z1\\ZuispCP users records are missing or corrupt!\\Zn\n
							Please fix folowing:\n\n".
							join("\n\n", @errors)
							."\n\nFix this and try again.
		");
		error("\n".join("\n", @errors));
		return 1;
	}

	0;
}

sub systemConfigTest{

	use iMSCP::Execute;
	use iMSCP::Dialog;
	use iMSCP::Database;

	my ($stdout, $stderr, @errors);
	my $rv		= execute("find $main::ispcpConfig{'CONF_DIR'} -type f -name '*.system'", \$stdout, \$stderr);
	debug("$stdout") if $stdout;
	push (@errors, $stderr) if $rv;

	my @files	= split("\n", $stdout);

	for my $file (@files){
		my $destination = $file;
		$destination =~ s/$main::ispcpConfig{'CONF_DIR'}/$main::imscpConfig{'CONF_DIR'}/g;
		$rv = execute("cp -fv $file $destination", \$stdout, \$stderr);
		debug("$stdout") if $stdout;
		push (@errors, $stderr) if $rv;
	}

	my $database = iMSCP::Database->new(db => 'mysql')->factory();
	my $query = "
				SELECT `domain_name` AS 'name' FROM `domain`
				UNION
				SELECT `alias_name` AS 'name' FROM `domain_aliasses`
	";
	my $result = $database->doQuery('name', $query);
	if (ref $result ne 'HASH'){
		push(@errors, "$query produced following error: $result");
	} else {
		if (keys %{$result}){
			local $Data::Dumper::Terse = 1;
			for my $row (values %{$result}){
				if (-f "$main::ispcpConfig{'BIND_DB_DIR'}/$row->{name}.db"){
					$rv = execute("cp -fv $main::ispcpConfig{'BIND_DB_DIR'}/$row->{name}.db $main::imscpConfig{'CONF_DIR'}/bind/working/", \$stdout, \$stderr);
					debug("$stdout") if $stdout;
					push (@errors, $stderr) if $rv;
				}
			}
		}

	}

	$rv = 0;
	if (@errors){
		if(iMSCP::Dialog->factory()->msgbox("
							\\Z1\\ZuErrors while saving system files!\\Zn:\n\n
							".join("\n", @errors)."\n
							Fix this and after that try again"
		)){
			$rv = 1;
			warning("\n".join("\n", @errors));
		}
	}
	return ( $rv ? join("\n\n", @errors) : $rv);
}

sub confSave{

	use iMSCP::Crypt;
	use iMSCP::Boot;

	my $crypt = iMSCP::Crypt->new();
	my $pass = $crypt->decrypt_db_password($main::ispcpConfig{'DATABASE_PASSWORD'});

	$crypt->set('key',	$main::imscpDBKey);
	$crypt->set('iv',	 $main::imscpDBiv);
	$main::imscpConfig{'DATABASE_PASSWORD'} = $crypt->encrypt_db_password($pass);

	for(qw/
		DEFAULT_ADMIN_ADDRESS
		SERVER_HOSTNAME
		BASE_SERVER_IP
		BASE_SERVER_VHOST
		DATABASE_TYPE
		DATABASE_HOST
		DATABASE_NAME
		DATABASE_USER
		DATABASE_UTF8
		ZIP
		/
	){
		$main::imscpConfig{$_} = $main::ispcpConfig{$_};
	}

	0;
}

sub savePass {

	my $table		= shift;
	my $field_id	= shift;
	my $field_pass	= shift;
	my $values		= shift;
	my $errors		= shift;

	#switch key
	my $crypt = iMSCP::Crypt->new();
	$crypt->set('key',	$main::ispcpDBKey);
	$crypt->set('iv',	 $main::ispcpDBiv);

	my $pass =  $crypt->decrypt_db_password($values->{$field_pass});

	#restore keys
	$crypt->set('key',	$main::imscpDBKey);
	$crypt->set('iv',	 $main::imscpDBiv);

	$pass = $crypt->encrypt_db_password($pass);

	my $database = iMSCP::Database->new(db => 'mysql')->factory();
	my $query = "UPDATE `$table` SET `$field_pass` = ? WHERE `$field_id` = ?";
	my $error = $database->doQuery('dummy', $query, $pass, $values->{$field_id});
	if (ref $error ne 'HASH'){
		push(@{$errors}, "$query produced following error: $error");
	}

	0;
}

sub dbUpgrade{

	my @errors;

	my $query = 'UPDATE `config` SET `value` = \'47\' WHERE `config`.`name` = \'DATABASE_REVISION\' AND `value` > \'47\'';
	my $database = iMSCP::Database->new(db => 'mysql')->factory();
	my $result = $database->doQuery('mail_id', $query);
	if (ref $result ne 'HASH'){
		push(@errors, "$query produced following error: $result");
	}

	$query = 'SELECT `mail_id`, `mail_pass` FROM `mail_users` WHERE `mail_pass` != \'_no_\'';
	$database = iMSCP::Database->new(db => 'mysql')->factory();
	$result = $database->doQuery('mail_id', $query);
	if (ref $result ne 'HASH'){
		push(@errors, "$query produced following error: $result");
	} else {
		if (keys %{$result}){
			for my $row (values %{$result}){
				savePass('mail_users', 'mail_id', 'mail_pass', $row, \@errors);
			}
		}
	}

	$query = 'SELECT `sqlu_id`, `sqlu_pass` FROM `sql_user`';
	$database = iMSCP::Database->new(db => 'mysql')->factory();
	$result = $database->doQuery('sqlu_id', $query);
	if (ref $result ne 'HASH'){
		push(@errors, "$query produced following error: $result");
	} else {
		if (keys %{$result}){
			for my $row (values %{$result}){
				savePass('sql_user', 'sqlu_id', 'sqlu_pass', $row, \@errors);
			}
		}
	}

	if (@errors){
		error("\n".join("\n", @errors));
		exit 0 if iMSCP::Dialog->factory()->msgbox("
								\\Z1\\ZuWARNING\\Zn\n
								Please fix folowing:\n\n".
								join("\n\n", @errors)
								."\n
								This are not fatal error so we can proceed forward.
								be aware that some password must be changed before works again
		");
	}

	0;
}

sub otherMessCleanup{

	use iMSCP::Templator;
	use iMSCP::File;
	use iMSCP::Execute;

	my ($startTag, $endTag, $file, $rs, $stdout, $stderr, @errors);

	#named.conf make sure does not contain shitty tags
	$startTag = iMSCP::File->new(filename => "$main::ispcpConfig{'CONF_DIR'}/bind/parts/cfg_dta_b.tpl")->get();
	push(@errors, "Can not read $main::ispcpConfig{'CONF_DIR'}/bind/parts/cfg_dta_b.tpl") if !$startTag;
	$endTag = iMSCP::File->new(filename => "$main::ispcpConfig{'CONF_DIR'}/bind/parts/cfg_dta_e.tpl")->get();
	push(@errors, "Can not read $main::ispcpConfig{'CONF_DIR'}/bind/parts/cfg_dta_e.tpl") if !$endTag;

	$file = iMSCP::File->new(filename => $main::ispcpConfig{'BIND_CONF_FILE'});
	my $bind = $file->get();
	push(@errors, "Can not read $main::ispcpConfig{'BIND_CONF_FILE'}") if !$bind;

	$bind = replaceBloc($startTag, $endTag, ' ', $bind, 0) if($bind && $startTag && $endTag);

	if($bind){
		$file->set($bind) and push(@errors, getLastError());
		$file->save() and push(@errors, getLastError());
	}

	$file = iMSCP::File->new(filename => "$main::imscpConfig{'CONF_DIR'}/bind/backup/named.conf.system");
	my $bkbind = $file->get();
	push(@errors, "Can not read $main::imscpConfig{'CONF_DIR'}/bind/backup/named.conf.system") if !$bkbind;

	if($bkbind && $startTag && $endTag){
		$bkbind = replaceBloc($startTag, $endTag, ' ', $bkbind, 0);
	}
	if ($bkbind){
		$file->set($bkbind) and push(@errors, getLastError());
		$file->save() and push(@errors, getLastError());
	}

	#fcgi / fastcgi cleanup
	if(! -e '/etc/SuSE-release' && -e '/usr/sbin/a2enmod') {
		$rs = execute("/usr/sbin/a2dismod fastcgi_ispcp fcgid_ispcp", \$stdout, \$stderr);
		debug("$stdout") if $stdout;
		push(@errors, $stderr) if $stderr;
	}
	for (qw/fastcgi_ispcp.conf fastcgi_ispcp.load fcgid_ispcp.conf fcgid_ispcp.load/) {
		if(-e "$main::ispcpConfig{'APACHE_MODS_DIR'}/$_") {
			unlink "$main::ispcpConfig{'APACHE_MODS_DIR'}/$_" or push(@errors, ": Delete $main::ispcpConfig{'APACHE_MODS_DIR'}/$_ failed: $!");
		}
	}

	#apache ispcp.conf
	if(! -e '/etc/SuSE-release' && -e '/usr/sbin/a2dissite') {
		$rs = execute("/usr/sbin/a2dissite ispcp.conf", \$stdout, \$stderr);
		debug("$stdout") if $stdout;
		push(@errors, $stderr) if $stderr;
	}
	if(-e "$main::ispcpConfig{'APACHE_SITES_DIR'}/ispcp.conf") {
		unlink "$main::ispcpConfig{'APACHE_SITES_DIR'}/ispcp.conf" or push(@errors, ": Delete $main::ispcpConfig{'APACHE_SITES_DIR'}/ispcp.conf failed: $!");
	}

	##logrotate
	for ('apache', 'apache2') {
		next if(! -e "$main::imscpConfig{'CONF_DIR'}/apache/backup/$_.system");

		$file = iMSCP::File->new(filename => "$main::imscpConfig{'CONF_DIR'}/apache/backup/$_.system");
		my $content = $file->get();
		push(@errors, "Can not read $main::imscpConfig{'CONF_DIR'}/apache/backup/$_.system") if !$content;

		$content =~ s/sharedscripts\n\tprerotate\n\t\t$main::ispcpConfig{'AWSTATS_ROOT_DIR'}\/awstats_updateall.pl now -awstatsprog=$main::ispcpConfig{'AWSTATS_ENGINE_DIR'}\/awstats.pl &> \/dev\/null\n\tendscript/sharedscripts/gi;

		if($content){
			$file->set($content) and push(@errors, getLastError());
			$file->save() and push(@errors, getLastError());
		}
	}
	for ('/etc/logrotate.d/apache', '/etc/logrotate.d/apache2') {
		next if(! -e $_);
		$file = iMSCP::File->new(filename => $_);
		my $content = $file->get();
		push(@errors, "Can not read $main::imscpConfig{'CONF_DIR'}/apache/backup/$_.system") if !$content;

		$content =~ s/sharedscripts\n\tprerotate\n\t\t$main::ispcpConfig{'AWSTATS_ROOT_DIR'}\/awstats_updateall.pl now -awstatsprog=$main::ispcpConfig{'AWSTATS_ENGINE_DIR'}\/awstats.pl &> \/dev\/null\n\tendscript/sharedscripts/gi;

		if($content){
			$file->set($content) and push(@errors, getLastError());
			$file->save() and push(@errors, getLastError());
		}
	}

	if (@errors){
		warning("\n".join("\n", @errors));
		exit 0 if iMSCP::Dialog->factory()->msgbox("
								\\Z1\\ZuWARNING\\Zn\n
								Please fix folowing:\n".
								join("\n\n", @errors)
								."\n
								This are not fatal error so we can proceed forward.
								be aware that we do not guarantee that will succeed
		");
	}

	0;
}

sub daemonRemove{

	use iMSCP::Execute;
	my ($rs, $stdout, $stderr, @errors);

	for ($main::ispcpConfig{'CMD_ISPCPD'}, $main::ispcpConfig{'CMD_ISPCPN'}) {
		$rs = execute("$_ stop", \$stdout, \$stderr);
		debug("$stdout") if $stdout;
		push(@errors, $stderr) if $stderr;
		if($rs && $_ eq $main::ispcpConfig{'CMD_ISPCPD'}){
			$rs = execute("kill -9 `pidof ispcp_daemon`", \$stdout, \$stderr);
			debug("$stdout") if $stdout;
			push(@errors, $stderr) if $stderr;
		}
		if(-x '/usr/sbin/update-rc.d') {
			$rs = execute("/usr/sbin/update-rc.d -f $_ remove", \$stdout, \$stderr);
			debug("$stdout") if $stdout;
			push(@errors, $stderr) if $stderr;
		} elsif(-x '/usr/lib/lsb/install_initd') {
			$rs = execute("/usr/lib/lsb/remove_initd $_", \$stdout, \$stderr);
			debug("$stdout") if $stdout;
			push(@errors, $stderr) if $stderr;
		}
		if(-e $_) {
			unlink $_ or push(@errors, ": Delete $_ failed: $!");
		}
	}

	if (@errors){
		warning("\n".join("\n", @errors));
		exit 0 if iMSCP::Dialog->factory()->msgbox("
								\\Z1\\ZuWARNING\\Zn\n
								Please fix folowing:\n".
								join("\n\n", @errors)
								."\n
								This are not fatal error so we can proceed forward.
								be aware that we do not guarantee that will succeed
		");
	}

	0;
}

sub removeDirs{

	use iMSCP::Dir;
	my $dir;
	my $errors	= '';

	for(
		$main::ispcpConfig{'CONF_DIR'},										#/etc/ispcp
		$main::ispcpConfig{'LOG_DIR'},										#/var/log/ispcp
		$main::ispcpConfig{'ROOT_DIR'},										#/var/www/ispcp
		$main::ispcpConfig{'FTPD_CONF_DIR'},								#/etc/proftpd/ispcp
		$main::ispcpConfig{'APACHE_CUSTOM_SITES_CONFIG_DIR'},				#/etc/apache2/ispcp
		$main::ispcpConfig{'MTA_VIRTUAL_CONF_DIR'}							#/etc/postfix/ispcp
	){
		$dir = iMSCP::Dir->new(dirname => $_);
		$errors .= getLastError() if $dir->remove();
	}

	 if ($errors) {
		iMSCP::Dialog->factory()->msgbox("
									\\Z1\\ZuWARNING\\Zn\n
									Please fix folowing:\n".
									$errors
									."\n
									This are not fatal error so we can proceed forward.
									be aware that we do not guarantee that will succeed
		");
		warning("\n$errors\n");
	};

	0;
}

sub removeFile{

	use iMSCP::File;
	my $file;
	my $errors;

	for(
		($^O =~ /bsd$/ ? '/usr/local/etc/' : '/etc/').'cron.d/ispcp',		#/etc/cron.d/ispcp
		($^O =~ /bsd$/ ? '/usr/local/etc/' : '/etc/').'logrotate.d/ispcp',	#/etc/logrotate.d/ispcp
	){
		$file = iMSCP::File->new(filename => $_);
		$errors .= getLastError() if ($file->delFile());
	}

	if ($errors) {
		iMSCP::Dialog->factory()->msgbox("
									\\Z1\\ZuWARNING\\Zn\n
									Please fix folowing:\n".
									$errors
									."\n
									This are not fatal error so we can proceed forward.
									be aware that we do not guarantee that will succeed
		");
		warning("\n$errors\n");
	}

	0;
}

sub systemSetup{

	iMSCP::Dialog->factory()->msgbox("
								\\Z1SUCCESS\\Zn\n\n
								You can now install iMSCP. Type \\Z4./imscp-setup\\Zn
	");

	0;
}
